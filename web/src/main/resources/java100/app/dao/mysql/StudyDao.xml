<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="java100.app.dao.StudyDao">
    <resultMap type="study" id="studyMap">
        <id  column="sno" property="sno"/>
        <result column="sloc" property="sloc"/>
        <result column="sname" property="sname"/>
        <result column="sint" property="sint"/>
        <result column="sppl" property="sppl"/>
        <result column="sregdt" property="sregdt"/>
        <result column="scorp" property="scorp"/>
        <result column="simg" property="simg"/>
        <result column="scheck" property="scheck"/>
        <association property="writer" javaType="member">
            <id     column="ino"       property="no"/>
            <result column="sloc"     property="address"/>
        </association>
    </resultMap>
        <resultMap type="StudyMember" id="StudyMember">
        <id  column="smno" property="smno"/>
        <result column="sno" property="sno"/>
        <result column="ino" property="ino"/>
        
        <result column="id" property="id"/>
        <result column="email" property="email"/>
        <result column="tel" property="tel"/>
        <result column="name" property="name"/>
        <result column="no" property="no"/>
    </resultMap>
    
    
    <select id="findAll" resultMap="studyMap" parameterType="map">
        select sno, 
               sloc, 
               sname, 
               sint, 
               sppl,
               sregdt, 
               scorp, 
               simg,
                
               (select count(*) from g_mebst a where a.sno = b.sno) as scheck
        from g_study b
        <if test="words != null">
            <where>
                <foreach collection="words" item="word">
                    or sname like '%${word}%' or sdesc like '%${word}%' or scorp like '%${word}%' or sloc like '%${word}%'
                </foreach>
         <if test="address != null">
                   and sloc like #{address}
                    </if>
                   </where>
        </if>
        order by 
        <choose>
            <when test="orderColumn == 'sloc' and align == 'desc'">
                sloc desc
            </when>
            <when test="orderColumn == 'sloc' and align == 'asc'">
                sloc asc
            </when>
            <when test="orderColumn == 'sname' and align == 'desc'">
                sname desc
            </when>
            <when test="orderColumn == 'sname' and align == 'asc'">
                sname asc
            </when>
            <otherwise>
                sno asc
            </otherwise>
        </choose>
        
        limit #{startIndex}, #{size}
    </select>
    <select id="countAll" resultType="int">
        select count(*) from g_study
    </select>
    <select id="findByNo" resultType="study" parameterType="int">
        select sno, sloc, sname, sdesc , sint, sppl,
               sregdt, scorp, simg, scheck
        from g_study
        where sno=#{value}
    </select>
   <insert id="insert" parameterType="study"
        useGeneratedKeys="true" keyColumn="no" keyProperty="no">
        insert into g_study(
        sloc ,sname, sdesc, sint, 
        sppl, sregdt, scorp, 
        simg, scheck, ino)
        values(
        #{sloc},#{sname},#{sdesc},#{sint},
        #{sppl},now(),#{scorp},
        #{simg}, 1 ,#{writer.no})
    </insert>
    
    <update id="update" parameterType="study">
        update g_study set 
            sloc=#{sloc},
             sname=#{sname},
            sdesc=#{sdesc},
            sint=#{sint},
            sppl=#{sppl},
            scorp=#{scorp},
            simg=#{simg},
            scheck=#{scheck}
        where sno=#{sno}
    </update>

    <delete id="delete" parameterType="int">
        delete from g_study
        where sno=#{value}
    </delete>
    
    <insert id="memberInfo" parameterType="StudyMember"
        useGeneratedKeys="true" keyColumn="no" keyProperty="no">
        insert into g_mebst(
        sno, ino)
        values(
        #{sno},#{ino})
    </insert>
    <select id="findLast" resultType="int" >
        select a.sno 
          from (select b.sno                 as sno
                     , @rownum := @rownum +1 as rownum 
                  from g_study b
                     , (select @rownum := 0) temp 
                 order by sno desc) a 
         where a.rownum = 1
    </select>
    <!-- 스터디 유저정보 -->
    <select id="studyUser" resultType="StudyMember" parameterType="map">
select c.pid as id
         , c.pmail as email
         , c.ptel as tel
         , d.iname as name
         , c.pno as no
      from g_mebst a
         , g_study  b
         , g_per      c
         , g_iper     d
     where a.sno = b.sno
       and a.ino  = c.pno
       and c.pno = d.ino
       and a.sno = #{sno}
    </select>
    
    <!-- MyStudy -->
    <select id="myStudyInfo" resultMap="studyMap" parameterType="map">
        select b.sno, 
               b.sloc, 
               b.sname, 
               b.sint, 
               b.sppl,
               b.sregdt, 
               b.scorp, 
               b.simg, 
               (select count(*) from g_mebst a where a.sno = b.sno) as scheck
  from g_mebst a
         , g_study  b
where a.ino = #{loginUserNo}
    and a.sno = b.sno 
 limit #{startIndex}, #{size}
    </select>
    <select id = "chageId" resultType="java.lang.String" parameterType="int">
        select a.pid as id
          from g_per  a
         where a.pno = #{no}
    
    </select>
</mapper>









